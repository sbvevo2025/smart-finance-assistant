# AI-assisted data loading section
# (Copy the code AI provides here)
import pandas as pd
import numpy as np

def load_and_clean_transactions(file_path: str) -> pd.DataFrame:
    """
    Load, clean, and validate a CSV file containing transaction data.

    Parameters
    ----------
    file_path : str
        The path to the CSV file to load (e.g., 'sample_transactions.csv').

    Returns
    -------
    pd.DataFrame
        A cleaned and validated pandas DataFrame.
    """
    
    # ======================
    # 1. LOAD CSV DATA
    # ======================
    try:
        df = pd.read_csv(file_path)
        print(f"‚úÖ Successfully loaded '{file_path}'")
    except FileNotFoundError:
        raise FileNotFoundError(f"‚ùå File not found: {file_path}")
    except pd.errors.EmptyDataError:
        raise ValueError("‚ùå The CSV file is empty.")
    except pd.errors.ParserError as e:
        raise ValueError(f"‚ùå Error parsing CSV: {e}")

    # ======================
    # 2. VALIDATE REQUIRED COLUMNS
    # ======================
    required_columns = {"Date", "Amount", "Category", "Description"}
    missing_columns = required_columns - set(df.columns)
    if missing_columns:
        raise ValueError(f"‚ùå Missing required columns: {missing_columns}")
    
    # ======================
    # 3. CLEAN DATA
    # ======================
    # --- Clean Amount column: remove $ and commas, convert to float
    df["Amount"] = (
        df["Amount"]
        .astype(str)
        .str.replace(r"[\$,]", "", regex=True)  # remove $ and ,
        .replace("", np.nan)
        .astype(float)
    )

    # --- Convert Date to datetime format
    df["Date"] = pd.to_datetime(df["Date"], errors="coerce")

    # ======================
    # 4. HANDLE COMMON DATA ISSUES
    # ======================
    # Drop rows missing critical data
    before_drop = len(df)
    df = df.dropna(subset=["Date", "Amount"])
    after_drop = len(df)
    if before_drop != after_drop:
        print(f"‚ö†Ô∏è Dropped {before_drop - after_drop} rows with missing Date or Amount.")

    # Fill missing optional fields with placeholders
    df["Category"] = df["Category"].fillna("Uncategorized")
    df["Description"] = df["Description"].fillna("No description provided")

    # Remove duplicates (if any)
    df = df.drop_duplicates()

    # ======================
    # 5. SHOW BASIC INFO
    # ======================
    print("\nüìä === Dataset Overview ===")
    print(df.info())
    print("\nüîé === First 5 Transactions ===")
    print(df.head())
    print("\nüí∞ === Amount Summary Statistics ===")
    print(df["Amount"].describe())

    return df


# ======================
# MAIN EXECUTION BLOCK
# ======================
if __name__ == "__main__":
    try:
        transactions_df = load_and_clean_transactions("sample_transactions.csv")
    except Exception as e:
        print(e)

# Add your own comments about whast you learned
